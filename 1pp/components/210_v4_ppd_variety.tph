/* ================================================================================================================================================================================ *
 *  v 4.2.0                                                                                                                                                                         *
 *                                     C O M P O N E N T   :   I n c r e a s e d   p a p e r d o l l   o b j e c t   v a r i e t y   (c o r e)                                      *
 *                                                                                                                                                                                  *
 * ================================================================================================================================================================================ *
 *  This component increases paperdoll variety by adding various alternates sharing existing object animations. Included are separate paperdoll appearances for bastard swords,     *
 *  various types of flails, maces, short bows, and more.                                                                                                                           *
 * ================================================================================================================================================================================ *
 *  change-log:                                                                                                                                                                     *
 *  -----------                                                                                                                                                                     *
 *      - CRE files: READ_LONG 0x28 instead of READ_SHORT 0x28 (dword!).                                                                                                            *
 *      - Coding simplification:                                                                                                                                                    *
 *          Replaced `GAME_IS` conditions with variables checks to speed up install time.                                                                                           *
 *          Grouped actions or patches with ACTION_FOR_EACH and PATCH_FOR_EACH whenever possible.                                                                                   *
 *          Simplified codes creating undroppable clones of weapons (in particular with tutu_var) replacing primary weapon with undroppable clone and moving it to inventory.       *
 *          ITM files: used WRITE_LONG 0x18 (THIS BAND BNOT BIT2) to remove droppable flag instead of writing the offset new value.                                                 *
 * ================================================================================================================================================================================ */

SILENT

ACTION_FOR_EACH paperdoll IN ~wphf0oin~ ~wphf1oin~ ~wphf3oin~ ~wphm2oin~ ~wphs0oin~ ~wplbsinv~ ~wplf0inv~ ~wplf0oin~ ~wplf1inv~ ~wplf1oin~ ~wplf3inv~ ~wplf3oin~ ~wplm2inv~ ~wplm2oin~ ~wplq2inv~ ~wplq3inv~ ~wplq4inv~ ~wpls0inv~ ~wpls0oin~ ~wpmbsinv~ ~wpmf0inv~ ~wpmf0oin~ ~wpmf1inv~ ~wpmf1oin~ ~wpmf2inv~ ~wpmf2oin~ ~wpmf3inv~ ~wpmf3oin~ ~wpmm2inv~ ~wpmm2oin~ ~wpmq2inv~ ~wpmq3inv~ ~wpmq4inv~ ~wpms0inv~ ~wpms0oin~ ~wpnbsinv~ ~wpnf0inv~ ~wpnf0oin~ ~wpnf1inv~ ~wpnf1oin~ ~wpnf3inv~ ~wpnf3oin~ ~wpnm2inv~ ~wpnm2oin~ ~wpnq2inv~ ~wpnq3inv~ ~wpnq4inv~ ~wpns0inv~ ~wpns0oin~ ~wpsbsinv~ ~wpsf0inv~ ~wpsf0oin~ ~wpsf1inv~ ~wpsf1oin~ ~wpsf3inv~ ~wpsf3oin~ ~wpsm2inv~ ~wpsm2oin~ ~wpsq2inv~ ~wpsq3inv~ ~wpsq4inv~ ~wpss0inv~ ~wpss0oin~ BEGIN
	COPY ~1pp/additions/obj_1pp/%paperdoll%.bam~ ~override~
END


/* ========================== *
 *  CREATE MIRROR ANIMATIONS  *
 * ========================== */

PRINT @210000 // ~Creating mirror animations...~
SILENT

/* -------- *
 *  Flails  *
 * -------- */

ACTION_FOR_EACH set IN ~f0~ ~f1~ ~f3~ BEGIN

	ACTION_FOR_EACH category IN ~l~ ~m~ ~n~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a1~ ~a3~ ~a5~ ~a7~ ~a8~ ~a9~ ~g1~ ~oa7~ ~oa8~ ~oa9~ ~og1~ BEGIN
			COPY_EXISTING ~wq%category%fl%sequence%.bam~ ~override/wq%category%%set%%sequence%.bam~
		END
	END

	ACTION_FOR_EACH category IN ~l~ ~m~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a1~ ~a1e~ ~a3~ ~a3e~ ~g1~ ~g1e~ ~w2~ ~w2e~ BEGIN
			COPY_EXISTING ~wp%category%fl%sequence%.bam~ ~override/wp%category%%set%%sequence%.bam~
		END
	END

END

/* ------ *
 *  Mace  *
 * ------ */

ACTION_FOR_EACH set IN ~m2~ BEGIN

	ACTION_FOR_EACH category IN ~l~ ~m~ ~n~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a1~ ~a3~ ~a5~ ~a7~ ~a8~ ~a9~ ~g1~ ~oa7~ ~oa8~ ~oa9~ ~og1~ BEGIN
			COPY_EXISTING ~wq%category%mc%sequence%.bam~ ~override/wq%category%%set%%sequence%.bam~
		END
	END

	ACTION_FOR_EACH category IN ~l~ ~m~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a1~ ~a1e~ ~a3~ ~a3e~ ~g1~ ~g1e~ ~w2~ ~w2e~ BEGIN
			COPY_EXISTING ~wp%category%mc%sequence%.bam~ ~override/wp%category%%set%%sequence%.bam~
		END
	END

END

/* -------------- *
 *  Quaterstaves  *
 * -------------- */

ACTION_FOR_EACH set IN ~q2~ ~q3~ ~q4~ BEGIN

	ACTION_FOR_EACH category IN ~l~ ~m~ ~n~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a2~ ~a4~ ~a6~ ~g1~ BEGIN
			COPY_EXISTING ~wq%category%qs%sequence%.bam~ ~override/wq%category%%set%%sequence%.bam~
		END
	END

	ACTION_FOR_EACH category IN ~l~ ~m~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a2~ ~a2e~ ~a4~ ~a4e~ ~a6~ ~a6e~ ~g1~ ~g1e~ ~w2~ ~w2e~ BEGIN
			COPY_EXISTING ~wp%category%qs%sequence%.bam~ ~override/wp%category%%set%%sequence%.bam~
		END
	END

END

/* --------------- *
 *  Bastard sword  *
 * --------------- */

ACTION_FOR_EACH set IN ~s0~ BEGIN

	ACTION_FOR_EACH category IN ~l~ ~m~ ~n~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a1~ ~a3~ ~a5~ ~a7~ ~a8~ ~a9~ ~g1~ ~oa7~ ~oa8~ ~oa9~ ~og1~ BEGIN
			COPY_EXISTING ~wq%category%s1%sequence%.bam~ ~override/wq%category%%set%%sequence%.bam~
		END
	END

	ACTION_FOR_EACH category IN ~l~ ~m~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a1~ ~a1e~ ~a3~ ~a3e~ ~a5~ ~a5e~ ~g1~ ~g1e~ ~w2~ ~w2e~ BEGIN
			COPY_EXISTING ~wp%category%s1%sequence%.bam~ ~override/wp%category%%set%%sequence%.bam~
		END
	END

END

/* ----------- *
 *  Short Bow  *
 * ----------- */

ACTION_FOR_EACH set IN ~bs~ BEGIN

	ACTION_FOR_EACH category IN ~l~ ~m~ ~n~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~sa~ ~g1~ BEGIN
			COPY_EXISTING ~wq%category%bw%sequence%.bam~ ~override/wq%category%%set%%sequence%.bam~
		END
	END

	ACTION_FOR_EACH category IN ~l~ ~m~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~sa~ ~sae~ ~g1~ ~g1e~ ~w2~ ~w2e~ BEGIN
			COPY_EXISTING ~wp%category%bw%sequence%.bam~ ~override/wp%category%%set%%sequence%.bam~
		END
	END

END

/* --------------------------- *
 *  harmonising morning stars  *
 * --------------------------- */

ACTION_FOR_EACH set IN ~ms~ BEGIN
	ACTION_FOR_EACH category IN ~l~ ~m~ ~n~ ~s~ BEGIN
		ACTION_FOR_EACH sequence IN ~a1~ ~a3~ ~a5~ ~a7~ ~a8~ ~a9~ ~g1~ ~oa7~ ~oa8~ ~oa9~ ~og1~ BEGIN
			COPY_EXISTING ~wq%category%mc%sequence%.bam~ ~override/wq%category%%set%%sequence%.bam~
		END
	END
END


/* ======================== *
 *  CREATE WEAPON OVERLAYS  *
 * ======================== */

PRINT @210001 // ~Patching creatures for weapon overlays.~
SILENT

// Gwen fix: simplified code creating undroppable clones of weapons

/* -------------- *
 *  sword clones  *
 * -------------- */

ACTION_FOR_EACH sword IN ~01~ ~02~ ~03~ ~18~ ~34~ ~37~ ~38~ ~39~ ~42~ ~62~ ~63~ ~64~ ~65~ ~72~ BEGIN
	ACTION_FOR_EACH tutu_game IN ~~ ~_~ BEGIN
		ACTION_IF (FILE_EXISTS_IN_GAME ~%tutu_game%sw1h%sword%.itm~) BEGIN
			COPY_EXISTING ~%tutu_game%sw1h%sword%.itm~ ~override/%tutu_game%comps%sword%.itm~
				PATCH_IF (SOURCE_SIZE > 0x71) BEGIN				// protects against invalid files
					WRITE_LONG 0x18 (THIS BAND BNOT BIT2)		// removes droppable flag [or WRITE_BYTE 0x18 (THIS BAND `BIT2)]
				END
			BUT_ONLY
		END
	END
END

/* ------------ *
 *  bow clones  *
 * ------------ */

ACTION_FOR_EACH ~bow~ IN ~05~ ~06~ ~08~ ~14~ ~15~ ~18~ ~19~ ~20~ ~21~ ~26~ BEGIN
	ACTION_FOR_EACH tutu_game IN ~~ ~_~ BEGIN
		ACTION_IF (FILE_EXISTS_IN_GAME ~%tutu_game%bow%bow%.itm~) BEGIN
			COPY_EXISTING ~%tutu_game%bow%bow%.itm~ ~override/%tutu_game%compb%bow%.itm~
				PATCH_IF (SOURCE_SIZE > 0x71) BEGIN				// protects against invalid files
					WRITE_LONG 0x18 (THIS BAND BNOT BIT2)		// removes droppable flag [or WRITE_BYTE 0x18 (THIS BAND `BIT2)]
				END
			BUT_ONLY
		END
	END
END


/* ========================================= *
 *  PATCHING CREATURES WITH WEAPON OVERLAYS  *
 * ========================================= */

ACTION_IF (is_bg2 OR is_tob OR is_tutu) BEGIN // GAME_IS ~bg2 tob tutu tutu_totsc ca~
	OUTER_SET itemslot = 0x02b8
	OUTER_SET itemstart = 0x02bc
	OUTER_SET wepone = 0x12
	OUTER_SET weptwo = 0x14
END

ACTION_IF (is_iwd) BEGIN // GAME_IS ~totlm how~
	OUTER_SET itemslot = 0x0320
	OUTER_SET itemstart = 0x324
	OUTER_SET wepone = 0x12
	OUTER_SET weptwo = 0x14
END

ACTION_IF (is_iwd2) BEGIN // GAME_IS ~iwd2~
	OUTER_SET itemslot = 0x0612
	OUTER_SET itemstart = 0x616
	OUTER_SET wepone = 0x12
	OUTER_SET weptwo = 0x16
END


PRINT @210002 //  ~Patching cre files.~
SILENT

// Replace primary weapon with undroppable clone and move it to inventory.
// -----------------------------------------------------------------------
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~

	READ_SHORT %itemslot% "ritemslot"
	READ_SHORT %itemstart% "ritemstart"
	READ_LONG  0x28 "animtype" ELSE 0

	// Gwen note: 0x8000 = GNOLL - 0x8100 = HOBGOBLIN - 0x8200 = KOBOLD - 0x2000 = SIRINE - 0x2200 = OGRE_MAGE
	PATCH_IF ("%animtype%" = 0x8100 || "%animtype%" = 0x8000 || "%animtype%" = 0x2200 || "%animtype%" = 0x8200 || "%animtype%" = 0x2000) BEGIN

		READ_SHORT (%ritemslot% + %wepone%) "primaryw"
		SET clone = 0
		PATCH_IF ("%primaryw%" != 0xffff) BEGIN
			READ_ASCII (%ritemstart% + (0x14 * %primaryw%)) "primitem"

			PATCH_FOR_EACH item IN ~sw1h01~ ~sw1h02~ ~sw1h03~ ~sw1h18~ ~sw1h34~ ~sw1h37~ ~sw1h38~ ~sw1h39~ ~sw1h42~ ~sw1h62~ ~sw1h63~ ~sw1h64~ ~sw1h65~ ~sw1h72~ ~bow05~ ~bow06~ ~bow08~ ~bow14~ ~bow15~ ~bow18~ ~bow19~ ~bow20~ ~bow21~ ~bow26~ BEGIN
				PATCH_FOR_EACH tutu_game IN ~~ ~_~ BEGIN
					PATCH_IF (clone = 0) BEGIN
						PATCH_IF ("%primitem%" STRING_COMPARE_CASE "%tutu_game%%item%" = 0) BEGIN
							INNER_PATCH_SAVE new_item ~%tutu_game%%item%~ BEGIN
								REPLACE_TEXTUALLY ~sw1h~ ~comps~
								REPLACE_TEXTUALLY ~bow~  ~compb~
							END
							WRITE_ASCIIE (%ritemstart% + (0x14 * %primaryw%)) ~%new_item%~ #8
							ADD_CRE_ITEM ~%tutu_game%%item%~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
							clone = 1
							PATCH_LOG "
--------------------------------------------------------------------------------------------------------
     ==> DEBUGGING CONTROL %SOURCE_RES% = primary weapon %primitem% replaced with %new_item%
--------------------------------------------------------------------------------------------------------"
							PATCH_SILENT
						END
					END
				END
			END
/* DEPRECATED as of v4.2.0
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h01" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps01~ #8
				ADD_CRE_ITEM ~sw1h01~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_sw1h01" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~_comps01~ #8
				ADD_CRE_ITEM ~_sw1h01~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h02" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps02~ #8
				ADD_CRE_ITEM ~sw1h02~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_sw1h02" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~_comps02~ #8
				ADD_CRE_ITEM ~_sw1h02~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h03" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps03~ #8
				ADD_CRE_ITEM ~sw1h03~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_sw1h03" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~_comps03~ #8
				ADD_CRE_ITEM ~_sw1h03~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h18" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps18~ #8
				ADD_CRE_ITEM ~sw1h18~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h34" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps34~ #8
				ADD_CRE_ITEM ~sw1h34~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h37" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps37~ #8
				ADD_CRE_ITEM ~sw1h37~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h38" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps38~ #8
				ADD_CRE_ITEM ~sw1h38~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h39" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps39~ #8
				ADD_CRE_ITEM ~sw1h39~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h42" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps42~ #8
				ADD_CRE_ITEM ~sw1h42~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h62" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps62~ #8
				ADD_CRE_ITEM ~sw1h62~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h63" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps63~ #8
				ADD_CRE_ITEM ~sw1h63~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h64" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps64~ #8
				ADD_CRE_ITEM ~sw1h64~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h65" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps65~ #8
				ADD_CRE_ITEM ~sw1h65~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h72" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~comps72~ #8
				ADD_CRE_ITEM ~sw1h72~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow05" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb05~ #8
				ADD_CRE_ITEM ~bow05~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_bow05" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~_compb05~ #8
				ADD_CRE_ITEM ~_bow05~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow06" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb06~ #8
				ADD_CRE_ITEM ~bow06~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_bow06" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~_compb06~ #8
				ADD_CRE_ITEM ~_bow06~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow08" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb08~ #8
				ADD_CRE_ITEM ~bow08~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_bow08" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~_compb08~ #8
				ADD_CRE_ITEM ~_bow08~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow14" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb14~ #8
				ADD_CRE_ITEM ~bow14~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow15" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb15~ #8
				ADD_CRE_ITEM ~bow15~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow18" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb18~ #8
				ADD_CRE_ITEM ~bow18~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow19" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb19~ #8
				ADD_CRE_ITEM ~bow19~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow20" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb20~ #8
				ADD_CRE_ITEM ~bow20~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow21" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb21~ #8
				ADD_CRE_ITEM ~bow21~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow26" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %primaryw%)) ~compb26~ #8
				ADD_CRE_ITEM ~bow26~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
*/		END
	END
BUT_ONLY


// Replace secondary weapon with undroppable clone and move it to inventory
// ------------------------------------------------------------------------
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~

	READ_SHORT %itemslot% "ritemslot"
	READ_SHORT %itemstart% "ritemstart"
	READ_LONG  0x28 "animtype" ELSE 0

	// Gwen note: 0x8000 = GNOLL - 0x8100 = HOBGOBLIN - 0x8200 = KOBOLD - 0x2000 = SIRINE - 0x2200 = OGRE_MAGE
	PATCH_IF ("%animtype%" = 0x8100 || "%animtype%" = 0x8000 || "%animtype%" = 0x2200 || "%animtype%" = 0x8200 || "%animtype%" = 0x2000) BEGIN

		READ_SHORT (%ritemslot% + %weptwo%) "secondaryw"
		SET clone = 0
		PATCH_IF ("%secondaryw%" != 0xffff) BEGIN
			READ_ASCII (%ritemstart% + (0x14 * %secondaryw%)) "primitem"

			PATCH_FOR_EACH item IN ~sw1h01~ ~sw1h02~ ~sw1h03~ ~sw1h18~ ~sw1h34~ ~sw1h37~ ~sw1h38~ ~sw1h39~ ~sw1h42~ ~sw1h62~ ~sw1h63~ ~sw1h64~ ~sw1h65~ ~sw1h72~ ~bow05~ ~bow06~ ~bow08~ ~bow14~ ~bow15~ ~bow18~ ~bow19~ ~bow20~ ~bow21~ ~bow26~ BEGIN
				PATCH_FOR_EACH tutu_game IN ~~ ~_~ BEGIN
					PATCH_IF (clone = 0) BEGIN
						PATCH_IF ("%primitem%" STRING_COMPARE_CASE "%tutu_game%%item%" = 0) BEGIN
							INNER_PATCH_SAVE new_item ~%tutu_game%%item%~ BEGIN
								REPLACE_TEXTUALLY ~sw1h~ ~comps~
								REPLACE_TEXTUALLY ~bow~  ~compb~
							END
							WRITE_ASCIIE (%ritemstart% + (0x14 * %secondaryw%)) ~%new_item%~ #8
							ADD_CRE_ITEM ~%tutu_game%%item%~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
							clone = 1
							PATCH_LOG "
--------------------------------------------------------------------------------------------------------
     ==> DEBUGGING CONTROL %SOURCE_RES% = secondary weapon %primitem% replaced with %new_item%
--------------------------------------------------------------------------------------------------------"
							PATCH_SILENT
						END
					END
				END
			END
/* DEPRECATED as of v4.2.0
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h01" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps01~ #8
				ADD_CRE_ITEM ~sw1h01~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_sw1h01" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~_comps01~ #8
				ADD_CRE_ITEM ~_sw1h01~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h02" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps02~ #8
				ADD_CRE_ITEM ~sw1h02~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_sw1h02" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~_comps02~ #8
				ADD_CRE_ITEM ~_sw1h02~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h03" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps03~ #8
				ADD_CRE_ITEM ~sw1h03~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_sw1h03" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~_comps03~ #8
				ADD_CRE_ITEM ~_sw1h03~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h18" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps18~ #8
				ADD_CRE_ITEM ~sw1h18~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h34" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps34~ #8
				ADD_CRE_ITEM ~sw1h34~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h37" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps37~ #8
				ADD_CRE_ITEM ~sw1h37~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h38" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps38~ #8
				ADD_CRE_ITEM ~sw1h38~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h39" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps39~ #8
				ADD_CRE_ITEM ~sw1h39~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h42" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps42~ #8
				ADD_CRE_ITEM ~sw1h42~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h62" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps62~ #8
				ADD_CRE_ITEM ~sw1h62~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h63" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps63~ #8
				ADD_CRE_ITEM ~sw1h63~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h64" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps64~ #8
				ADD_CRE_ITEM ~sw1h64~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h65" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps65~ #8
				ADD_CRE_ITEM ~sw1h65~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "sw1h72" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~comps72~ #8
				ADD_CRE_ITEM ~sw1h72~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow05" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb05~ #8
				ADD_CRE_ITEM ~bow05~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_bow05" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~_compb05~ #8
				ADD_CRE_ITEM ~_bow05~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow06" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb06~ #8
				ADD_CRE_ITEM ~bow06~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_bow06" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~_compb06~ #8
				ADD_CRE_ITEM ~_bow06~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow08" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb08~ #8
				ADD_CRE_ITEM ~bow08~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "_bow08" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~_compb08~ #8
				ADD_CRE_ITEM ~_bow08~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow14" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb14~ #8
				ADD_CRE_ITEM ~bow14~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow15" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb15~ #8
				ADD_CRE_ITEM ~bow15~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow18" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb18~ #8
				ADD_CRE_ITEM ~bow18~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow19" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb19~ #8
				ADD_CRE_ITEM ~bow19~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow20" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb20~ #8
				ADD_CRE_ITEM ~bow20~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow21" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb21~ #8
				ADD_CRE_ITEM ~bow21~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
			PATCH_IF ("%primitem%" STRING_COMPARE_CASE "bow26" = 0) BEGIN
				WRITE_ASCII (%ritemstart% + (0x14 * %secondaryw%)) ~compb26~ #8
				ADD_CRE_ITEM ~bow26~ #0 #0 #0 ~UNSTEALABLE~ ~inv~
			END
*/		END
	END
BUT_ONLY

// END of COMPONENT